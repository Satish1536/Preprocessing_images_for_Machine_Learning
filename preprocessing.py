# -*- coding: utf-8 -*-
"""Preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nFu8KAUb4FAWjwIByB99gcz4cy2HB0F-

## **UnZip File In Colab**
"""

# importing required modules 
from zipfile import ZipFile 

# specifying the zip file name 
file_name = "category.zip"

# opening the zip file in READ mode 
with ZipFile(file_name, 'r') as zip: 
	# printing all the contents of the zip file 
	zip.printdir() 

	# extracting all the files 
	print('Extracting all the files now...') 
	zip.extractall() 
	print('Done!')

"""#**Downsampled**"""

from shutil import copy
import os
from random import shuffle

path_base = '/content/drive/My Drive/Colab Notebooks/Dog Breed/'
all_classes = os.listdir(path_base + 'preprocessing/')

b = 0
for breed in all_classes:
    current_breed_images = os.listdir(os.path.join(path_base, 'preprocessing', breed))
    shuffle(current_breed_images)
    current_breed_images = current_breed_images[:66]
    c = 0
    for current_img in current_breed_images:
        path_from = os.path.join(path_base, 'preprocessing', breed, current_img)
        path_to = os.path.join(path_base, 'downsampled', breed, current_img)
        if not os.path.exists(os.path.join(path_base, 'downsampled')):
            os.mkdir(os.path.join(path_base, 'downsampled'))

        if not os.path.exists(os.path.join(path_base, 'downsampled', breed)):
            os.mkdir(os.path.join(path_base, 'downsampled', breed))

        copy(path_from, path_to)
        c += 1
    print('Copied {} images of {}'.format(c, breed))
    b += 1
print('done:', b)

"""#**Create Validation set Using Training Dataset**"""

train_path='/content/drive/My Drive/Crop/PlantVillage'
valid_perct=20
valid_path='/content/drive/My Drive/Crop/pv_valid'

def split_dataset(valid_perct, train_path,valid_path):
    total_class = os.listdir(train_path)
    for directory in total_class:
        os.chdir(os.path.join(train_path,directory))
        img_names = os.listdir(os.path.join(train_path,directory))
        length = len(img_names)
        num = int(length*valid_perct/100)
        random.shuffle(img_names)
        counter=0
        for i in img_names[:num]:
            os.chdir(valid_path)
            if not os.path.exists(directory):
                os.mkdir(directory)
            shutil.move(os.path.join(train_path,directory,i),
                        os.path.join(valid_path,directory))
            if (counter == num-2):
                print(f'{directory} valid set is created....')


split_dataset(valid_perct,train_path,valid_path)
print('Done')
